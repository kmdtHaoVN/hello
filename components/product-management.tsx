"use client"

import { useState } from "react"
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from "@/components/ui/card"
import { Button } from "@/components/ui/button"
import { Input } from "@/components/ui/input"
import { Label } from "@/components/ui/label"
import { Textarea } from "@/components/ui/textarea"
import { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from "@/components/ui/table"
import { Dialog, DialogContent, DialogHeader, DialogTitle, DialogTrigger } from "@/components/ui/dialog"
import { Badge } from "@/components/ui/badge"
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from "@/components/ui/select"
import { Plus, Edit, Trash2, Package, Search } from "lucide-react"

interface Product {
  id: string
  name: string
  category: string
  description: string
  supplier: string
}

const productCategories = [
  { id: "lighting", name: "√Ånh S√°ng & ƒê√®n" },
  { id: "stage", name: "S√¢n Kh·∫•u & √Çm Thanh" },
  { id: "decoration", name: "Trang Tr√≠" },
  { id: "catering", name: "Ti·ªác & ƒê·ªì ƒÇn" },
  { id: "photography", name: "Ch·ª•p ·∫¢nh & Quay Phim" },
  { id: "equipment", name: "Thi·∫øt B·ªã Kh√°c" },
  { id: "furniture", name: "B√†n Gh·∫ø & N·ªôi Th·∫•t" },
  { id: "gifts", name: "Qu√† T·∫∑ng & L∆∞u Ni·ªám" },
  { id: "transport", name: "V·∫≠n Chuy·ªÉn" },
  { id: "service", name: "D·ªãch V·ª• Nh√¢n S·ª±" },
]

export function ProductManagement() {
  const [products, setProducts] = useState<Product[]>([
    {
      id: "1",
      name: "ƒê√®n LED S√¢n Kh·∫•u 200W",
      category: "lighting",
      description: "ƒê√®n LED chuy√™n d·ª•ng cho s√¢n kh·∫•u, √°nh s√°ng tr·∫Øng/m√†u",
      supplier: "C√¥ng ty √Ånh S√°ng ABC",
    },
    {
      id: "2",
      name: "S√¢n Kh·∫•u Modular 4x6m",
      category: "stage",
      description: "S√¢n kh·∫•u l·∫Øp gh√©p, cao 1.2m",
      supplier: "S√¢n Kh·∫•u Pro",
    },
    {
      id: "3",
      name: "Hoa T∆∞∆°i Trang Tr√≠ B√†n",
      category: "decoration",
      description: "Hoa t∆∞∆°i trang tr√≠ cho t·ª´ng b√†n",
      supplier: "Hoa T∆∞∆°i ƒê·∫πp",
    },
    {
      id: "4",
      name: "Buffet Cao C·∫•p",
      category: "catering",
      description: "Buffet 5 m√≥n ch√≠nh + tr√°ng mi·ªáng",
      supplier: "Nh√† H√†ng Golden",
    },
    {
      id: "5",
      name: "B√†n Tr√≤n 10 Ng∆∞·ªùi",
      category: "furniture",
      description: "B√†n tr√≤n sang tr·ªçng cho 10 ng∆∞·ªùi",
      supplier: "N·ªôi Th·∫•t S·ª± Ki·ªán",
    },
  ])

  const [showAddDialog, setShowAddDialog] = useState(false)
  const [newProduct, setNewProduct] = useState<Partial<Product>>({
    name: "",
    category: "",
    description: "",
    supplier: "",
  })
  const [searchTerm, setSearchTerm] = useState("")
  const [categoryFilter, setCategoryFilter] = useState("all")

  const filteredProducts = products.filter((product) => {
    const matchesSearch =
      product.name.toLowerCase().includes(searchTerm.toLowerCase()) ||
      product.description.toLowerCase().includes(searchTerm.toLowerCase()) ||
      product.supplier.toLowerCase().includes(searchTerm.toLowerCase())

    const matchesCategory = categoryFilter === "all" || product.category === categoryFilter

    return matchesSearch && matchesCategory
  })

  const handleAddProduct = () => {
    if (newProduct.name && newProduct.category && newProduct.supplier) {
      const product: Product = {
        id: Date.now().toString(),
        name: newProduct.name,
        category: newProduct.category,
        description: newProduct.description || "",
        supplier: newProduct.supplier,
      }
      setProducts([...products, product])
      setNewProduct({
        name: "",
        category: "",
        description: "",
        supplier: "",
      })
      setShowAddDialog(false)
    }
  }

  const handleDeleteProduct = (id: string) => {
    if (confirm("B·∫°n c√≥ ch·∫Øc ch·∫Øn mu·ªën x√≥a s·∫£n ph·∫©m n√†y?")) {
      setProducts(products.filter((p) => p.id !== id))
    }
  }

  return (
    <div className="p-6 space-y-6">
      <div className="flex justify-between items-center">
        <div>
          <h1 className="text-3xl font-bold text-gray-900">üì¶ Qu·∫£n L√Ω S·∫£n Ph·∫©m</h1>
          <p className="text-gray-600">Qu·∫£n l√Ω danh m·ª•c s·∫£n ph·∫©m v√† d·ªãch v·ª• cho s·ª± ki·ªán</p>
        </div>
        <Dialog open={showAddDialog} onOpenChange={setShowAddDialog}>
          <DialogTrigger asChild>
            <Button className="bg-blue-600 hover:bg-blue-700">
              <Plus className="h-4 w-4 mr-2" />
              Th√™m S·∫£n Ph·∫©m
            </Button>
          </DialogTrigger>
          <DialogContent className="max-w-2xl">
            <DialogHeader>
              <DialogTitle>Th√™m S·∫£n Ph·∫©m M·ªõi</DialogTitle>
            </DialogHeader>
            <div className="space-y-4">
              <div className="grid grid-cols-2 gap-4">
                <div className="space-y-2">
                  <Label htmlFor="name">T√™n S·∫£n Ph·∫©m *</Label>
                  <Input
                    id="name"
                    value={newProduct.name}
                    onChange={(e) => setNewProduct({ ...newProduct, name: e.target.value })}
                    placeholder="Nh·∫≠p t√™n s·∫£n ph·∫©m"
                  />
                </div>
                <div className="space-y-2">
                  <Label htmlFor="category">Danh M·ª•c *</Label>
                  <Select
                    value={newProduct.category}
                    onValueChange={(value) => setNewProduct({ ...newProduct, category: value })}
                  >
                    <SelectTrigger>
                      <SelectValue placeholder="Ch·ªçn danh m·ª•c" />
                    </SelectTrigger>
                    <SelectContent>
                      {productCategories.map((category) => (
                        <SelectItem key={category.id} value={category.id}>
                          {category.name}
                        </SelectItem>
                      ))}
                    </SelectContent>
                  </Select>
                </div>
              </div>
              <div className="space-y-2">
                <Label htmlFor="supplier">Nh√† Cung C·∫•p *</Label>
                <Input
                  id="supplier"
                  value={newProduct.supplier}
                  onChange={(e) => setNewProduct({ ...newProduct, supplier: e.target.value })}
                  placeholder="T√™n nh√† cung c·∫•p"
                />
              </div>
              <div className="space-y-2">
                <Label htmlFor="description">M√¥ T·∫£</Label>
                <Textarea
                  id="description"
                  value={newProduct.description}
                  onChange={(e) => setNewProduct({ ...newProduct, description: e.target.value })}
                  placeholder="M√¥ t·∫£ v·ªÅ s·∫£n ph·∫©m"
                  rows={3}
                />
              </div>
              <div className="flex justify-end space-x-4">
                <Button variant="outline" onClick={() => setShowAddDialog(false)}>
                  H·ªßy
                </Button>
                <Button onClick={handleAddProduct}>Th√™m S·∫£n Ph·∫©m</Button>
              </div>
            </div>
          </DialogContent>
        </Dialog>
      </div>

      <div className="grid grid-cols-1 md:grid-cols-3 gap-6">
        <Card>
          <CardHeader className="flex flex-row items-center justify-between space-y-0 pb-2">
            <CardTitle className="text-sm font-medium">T·ªïng S·∫£n Ph·∫©m</CardTitle>
            <Package className="h-4 w-4 text-muted-foreground" />
          </CardHeader>
          <CardContent>
            <div className="text-2xl font-bold">{products.length}</div>
          </CardContent>
        </Card>

        <Card>
          <CardHeader className="flex flex-row items-center justify-between space-y-0 pb-2">
            <CardTitle className="text-sm font-medium">Danh M·ª•c</CardTitle>
            <Package className="h-4 w-4 text-muted-foreground" />
          </CardHeader>
          <CardContent>
            <div className="text-2xl font-bold">{new Set(products.map((p) => p.category)).size}</div>
          </CardContent>
        </Card>

        <Card>
          <CardHeader className="flex flex-row items-center justify-between space-y-0 pb-2">
            <CardTitle className="text-sm font-medium">Nh√† Cung C·∫•p</CardTitle>
            <Package className="h-4 w-4 text-muted-foreground" />
          </CardHeader>
          <CardContent>
            <div className="text-2xl font-bold">{new Set(products.map((p) => p.supplier)).size}</div>
          </CardContent>
        </Card>
      </div>

      <Card>
        <CardHeader>
          <CardTitle>Danh S√°ch S·∫£n Ph·∫©m</CardTitle>
          <CardDescription>Qu·∫£n l√Ω th√¥ng tin s·∫£n ph·∫©m v√† d·ªãch v·ª•</CardDescription>
        </CardHeader>
        <CardContent>
          <div className="flex space-x-4 mb-4">
            <div className="relative flex-1">
              <Search className="absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400 h-4 w-4" />
              <Input
                placeholder="T√¨m ki·∫øm s·∫£n ph·∫©m..."
                value={searchTerm}
                onChange={(e) => setSearchTerm(e.target.value)}
                className="pl-10"
              />
            </div>
            <Select value={categoryFilter} onValueChange={setCategoryFilter}>
              <SelectTrigger className="w-48">
                <SelectValue placeholder="L·ªçc theo danh m·ª•c" />
              </SelectTrigger>
              <SelectContent>
                <SelectItem value="all">T·∫•t c·∫£ danh m·ª•c</SelectItem>
                {productCategories.map((category) => (
                  <SelectItem key={category.id} value={category.id}>
                    {category.name}
                  </SelectItem>
                ))}
              </SelectContent>
            </Select>
          </div>

          <Table>
            <TableHeader>
              <TableRow>
                <TableHead>T√™n S·∫£n Ph·∫©m</TableHead>
                <TableHead>Danh M·ª•c</TableHead>
                <TableHead>Nh√† Cung C·∫•p</TableHead>
                <TableHead>M√¥ T·∫£</TableHead>
                <TableHead>H√†nh ƒê·ªông</TableHead>
              </TableRow>
            </TableHeader>
            <TableBody>
              {filteredProducts.length === 0 ? (
                <TableRow>
                  <TableCell colSpan={5} className="text-center py-8 text-gray-500">
                    <Package className="h-12 w-12 mx-auto mb-4 text-gray-300" />
                    <p>Kh√¥ng t√¨m th·∫•y s·∫£n ph·∫©m n√†o</p>
                  </TableCell>
                </TableRow>
              ) : (
                filteredProducts.map((product) => {
                  const category = productCategories.find((c) => c.id === product.category)
                  return (
                    <TableRow key={product.id}>
                      <TableCell className="font-medium">{product.name}</TableCell>
                      <TableCell>
                        <Badge variant="outline">{category?.name || product.category}</Badge>
                      </TableCell>
                      <TableCell>{product.supplier}</TableCell>
                      <TableCell className="max-w-xs truncate">{product.description}</TableCell>
                      <TableCell>
                        <div className="flex space-x-2">
                          <Button variant="ghost" size="sm">
                            <Edit className="h-4 w-4" />
                          </Button>
                          <Button
                            variant="ghost"
                            size="sm"
                            onClick={() => handleDeleteProduct(product.id)}
                            className="text-red-600 hover:text-red-700"
                          >
                            <Trash2 className="h-4 w-4" />
                          </Button>
                        </div>
                      </TableCell>
                    </TableRow>
                  )
                })
              )}
            </TableBody>
          </Table>
        </CardContent>
      </Card>
    </div>
  )
}
